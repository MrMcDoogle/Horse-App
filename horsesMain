import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, signInAnonymously } from 'firebase/auth';
import { getFirestore, collection, onSnapshot, addDoc, doc, deleteDoc, updateDoc } from 'firebase/firestore';

// Global variables provided by the Canvas environment for Firebase
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// Sign in with the provided custom token or anonymously if no token is available
async function signInUser() {
  try {
    if (initialAuthToken) {
      await signInWithCustomToken(auth, initialAuthToken);
    } else {
      await signInAnonymously(auth);
    }
  } catch (error) {
    console.error("Firebase Auth Error:", error);
  }
}

// Ensure Firebase is initialized and user is signed in before performing any operations
let isAuthReady = false;
auth.onAuthStateChanged(user => {
  if (user) {
    isAuthReady = true;
  }
});

// Inline SVG Icons to replace react-icons
const PlusIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5">
    <path fillRule="evenodd" d="M12 5.25a.75.75 0 0 1 .75.75v5.25H18a.75.75 0 0 1 0 1.5h-5.25V18a.75.75 0 0 1-1.5 0v-5.25H6a.75.75 0 0 1 0-1.5h5.25V6a.75.75 0 0 1 .75-.75Z" clipRule="evenodd" />
  </svg>
);

const EditIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-4 h-4">
    <path d="M21.731 2.269a2.625 2.625 0 0 0-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 0 0 0-3.712Zm-2.203 2.204L15.93 6.91l-2.484 2.484a.75.75 0 0 1-.363.189l-2.443.432a.75.75 0 0 1-.774-.774l.432-2.443a.75.75 0 0 1 .189-.363l2.484-2.484 2.204-2.204Zm-1.42 1.42L9.294 11.294a.75.75 0 0 1-.363.189l-2.443.432a.75.75 0 0 1-.774-.774l.432-2.443a.75.75 0 0 1 .189-.363l2.484-2.484 2.204-2.204Z" />
    <path d="M3 16.5a.75.75 0 0 0-.75.75v3a2.25 2.25 0 0 0 2.25 2.25h15a2.25 2.25 0 0 0 2.25-2.25v-3a.75.75 0 0 0-1.5 0v3a.75.75 0 0 1-.75.75H4.5a.75.75 0 0 1-.75-.75v-3a.75.75 0 0 0-.75-.75Z" />
  </svg>
);

const TrashIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-4 h-4">
    <path fillRule="evenodd" d="M16.5 4.5a2.25 2.25 0 0 1 2.25 2.25V19.5a2.25 2.25 0 0 1-2.25 2.25H7.5a2.25 2.25 0 0 1-2.25-2.25V6.75a2.25 2.25 0 0 1 2.25-2.25h1.5zm-1.5 6.75a.75.75 0 0 0-1.5 0v6a.75.75 0 0 0 1.5 0zm-4.5 0a.75.75 0 0 0-1.5 0v6a.75.75 0 0 0 1.5 0z" clipRule="evenodd" />
    <path d="M12 2.25a.75.75 0 0 0-1.5 0v1.5H9a.75.75 0 0 0-.75.75V6h6.5V4.5a.75.75 0 0 0-1.5 0z" />
  </svg>
);

const CheckIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-4 h-4">
    <path fillRule="evenodd" d="M19.968 5.752a.75.75 0 0 0-1.061 0L9.493 15.166 5.594 11.267a.75.75 0 0 0-1.061 1.061l4.5 4.5a.75.75 0 0 0 1.061 0l10.5-10.5a.75.75 0 0 0 0-1.061z" clipRule="evenodd" />
  </svg>
);

const TimesIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-4 h-4">
    <path fillRule="evenodd" d="M5.47 5.47a.75.75 0 0 1 1.06 0L12 10.94l5.47-5.47a.75.75 0 1 1 1.06 1.06L13.06 12l5.47 5.47a.75.75 0 1 1-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 0 1-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 0 1 0-1.06z" clipRule="evenodd" />
  </svg>
);

/**
 * Main application component.
 * Manages the different views, data, and interactions.
 */
export default function App() {
  // State for managing the current view, horses data, and messages
  const [view, setView] = useState('home'); // 'home' or 'create'
  const [horses, setHorses] = useState([]);
  const [message, setMessage] = useState('');
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [horseToDestroy, setHorseToDestroy] = useState(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [horseToEdit, setHorseToEdit] = useState(null);
  const [userId, setUserId] = useState(null);

  // Authenticate user and listen for horses data on component mount
  useEffect(() => {
    signInUser();

    // Set up auth state listener to get the user ID
    const unsubscribeAuth = auth.onAuthStateChanged(user => {
      if (user) {
        setUserId(user.uid);
      } else {
        setUserId(null);
      }
    });

    return () => unsubscribeAuth();
  }, []);

  // Listen for real-time changes to the horses collection
  useEffect(() => {
    if (!userId || !isAuthReady) return;

    // Use a unique path for the current user's data
    const collectionPath = `artifacts/${appId}/users/${userId}/horses`;
    const horsesCollection = collection(db, collectionPath);

    // Set up a real-time listener for the horses collection
    const unsubscribe = onSnapshot(horsesCollection, (snapshot) => {
      const horsesData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setHorses(horsesData);
    }, (error) => {
      console.error("Error fetching horses:", error);
      setMessage('Error fetching horses.');
    });

    // Cleanup the listener when the component unmounts
    return () => unsubscribe();
  }, [userId]);

  /**
   * Handles the creation of a new horse document in Firestore.
   * @param {string} name - The name of the horse.
   * @param {boolean} sex - The sex of the horse (true/false).
   */
  const handleCreateHorse = async (name, sex) => {
    if (!userId) {
      setMessage("User not authenticated. Please try again.");
      return;
    }

    try {
      const collectionPath = `artifacts/${appId}/users/${userId}/horses`;
      await addDoc(collection(db, collectionPath), { name, sex, createdAt: new Date() });
      setMessage("Horse created successfully!");
      setView('home');
      setTimeout(() => setMessage(''), 3000); // Clear message after 3 seconds
    } catch (error) {
      console.error("Error creating horse:", error);
      setMessage("Error creating horse.");
    }
  };

  /**
   * Shows the confirmation modal for destroying a horse.
   * @param {object} horse - The horse object to destroy.
   */
  const handleDestroyClick = (horse) => {
    setHorseToDestroy(horse);
    setShowConfirmModal(true);
  };

  /**
   * Confirms and destroys a horse document from Firestore.
   */
  const confirmDestroy = async () => {
    if (!horseToDestroy || !userId) return;

    try {
      const docPath = `artifacts/${appId}/users/${userId}/horses/${horseToDestroy.id}`;
      await deleteDoc(doc(db, docPath));
      setMessage("Horse destroyed successfully!");
      setShowConfirmModal(false);
      setHorseToDestroy(null);
      setTimeout(() => setMessage(''), 3000);
    } catch (error) {
      console.error("Error destroying horse:", error);
      setMessage("Error destorying horse.");
    }
  };

  /**
   * Handles the click on the "Edit Horse" button.
   * @param {object} horse - The horse object to edit.
   */
  const handleEditClick = (horse) => {
    setHorseToEdit(horse);
    setShowEditModal(true);
  };

  /**
   * Updates a horse document in Firestore.
   * @param {object} updatedHorse - The horse object with updated values.
   */
  const handleEditSubmit = async (updatedHorse) => {
    if (!userId) return;
    try {
      const docPath = `artifacts/${appId}/users/${userId}/horses/${updatedHorse.id}`;
      await updateDoc(doc(db, docPath), {
        name: updatedHorse.name,
        sex: updatedHorse.sex
      });
      setMessage("Horse updated successfully!");
      setShowEditModal(false);
      setHorseToEdit(null);
      setTimeout(() => setMessage(''), 3000);
    } catch (error) {
      console.error("Error updating horse:", error);
      setMessage("Error updating horse.");
    }
  };

  // Render the current view based on the 'view' state
  const renderView = () => {
    switch (view) {
      case 'home':
        return (
          <HomePage
            horses={horses}
            onNewHorse={() => setView('create')}
            onDestroy={handleDestroyClick}
            onEdit={handleEditClick}
            userId={userId}
          />
        );
      case 'create':
        return (
          <CreateHorsePage
            onCreate={handleCreateHorse}
            onBack={() => setView('home')}
          />
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-saddle-brown-100 dark:bg-stable-dark-brown text-stable-dark-brown dark:text-bone-white p-4 font-sans">
      <style>
        {`
        body {
            background-image: url('https://placehold.co/1920x1080/c79081/f1a586?text=Horse+themed+background');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }

        .horse-bg-image {
            background-image: url('https://placehold.co/800x600/6a3e2a/bone-white?text=horse.jpg');
            background-size: cover;
            background-position: center;
        }

        @keyframes fadeInOut {
            0%, 100% { opacity: 0; transform: translateY(-20px); }
            5% { opacity: 1; transform: translateY(0); }
            95% { opacity: 1; transform: translateY(0); }
        }

        .animate-fadeInOut {
            animation: fadeInOut 3s ease-in-out forwards;
        }

        @keyframes scaleIn {
            from { transform: scale(0.9); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }
        .animate-scaleIn {
            animation: scaleIn 0.3s ease-out forwards;
        }
        `}
      </style>
      <div className="container mx-auto max-w-4xl p-6 bg-bone-white dark:bg-stable-brown rounded-2xl shadow-xl">
        {/* Message Banner */}
        {message && (
          <div className="fixed top-4 left-1/2 -translate-x-1/2 bg-sage-green text-stable-dark-brown p-3 rounded-lg shadow-lg z-50 transition-all duration-300 transform scale-100 animate-fadeInOut">
            {message}
          </div>
        )}

        {/* Render the current view */}
        {renderView()}

        {/* Confirmation Modal */}
        {showConfirmModal && (
          <ConfirmModal
            onConfirm={confirmDestroy}
            onCancel={() => setShowConfirmModal(false)}
            horseName={horseToDestroy?.name}
          />
        )}

        {/* Edit Modal */}
        {showEditModal && (
          <EditHorseModal
            horse={horseToEdit}
            onUpdate={handleEditSubmit}
            onCancel={() => setShowEditModal(false)}
          />
        )}
      </div>
    </div>
  );
}

/**
 * Home Page Component.
 * @param {object} props
 * @param {Array} props.horses - List of horse objects.
 * @param {Function} props.onNewHorse - Handler for the "New Horse" button.
 * @param {Function} props.onDestroy - Handler for the "Destroy" button.
 * @param {Function} props.onEdit - Handler for the "Edit" button.
 * @param {string} props.userId - The ID of the authenticated user.
 */
const HomePage = ({ horses, onNewHorse, onDestroy, onEdit, userId }) => {
  return (
    <>
      {/* Header Section */}
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-extrabold text-saddle-brown dark:text-horse-cream">
          Horse Management App
        </h1>
        <button
          onClick={onNewHorse}
          className="bg-saddle-brown hover:bg-stable-brown text-bone-white font-bold py-2 px-6 rounded-full shadow-lg transition-transform transform hover:scale-105 flex items-center gap-2"
        >
          <PlusIcon /> Create Horse
        </button>
      </div>

      {/* User ID Display */}
      {userId && (
        <div className="mb-6 p-4 bg-saddle-brown-100 dark:bg-stable-brown-800 rounded-xl text-sm break-words">
          <span className="font-bold">User ID:</span> {userId}
        </div>
      )}

      {/* Horse List Section */}
      <div className="space-y-4">
        {horses.length > 0 ? (
          horses.map(horse => (
            <HorseCard
              key={horse.id}
              horse={horse}
              onDestroy={() => onDestroy(horse)}
              onEdit={() => onEdit(horse)}
            />
          ))
        ) : (
          <div className="text-center text-stable-brown-400 dark:text-stable-brown-600 p-8 border-2 border-dashed border-stable-brown-300 dark:border-stable-brown-700 rounded-xl">
            <div className="horse-bg-image h-48 rounded-lg mb-4"></div>
            <p className="text-lg">No horses found. Click 'Create Horse' to get started!</p>
          </div>
        )}
      </div>
    </>
  );
};

/**
 * Horse Card Component.
 * Displays a single horse's information and action buttons.
 * @param {object} props
 * @param {object} props.horse - The horse object.
 * @param {Function} props.onDestroy - Handler for the "Destroy" button.
 * @param {Function} props.onEdit - Handler for the "Edit" button.
 */
const HorseCard = ({ horse, onDestroy, onEdit }) => {
  return (
    <div className="bg-bone-white dark:bg-stable-brown-700 p-6 rounded-2xl shadow-md flex flex-col sm:flex-row justify-between items-center transition-all transform hover:scale-[1.01]">
      <div className="flex-1 text-center sm:text-left mb-4 sm:mb-0">
        <h2 className="text-xl font-semibold mb-1 truncate">{horse.name}</h2>
        <p className="text-stable-brown-600 dark:text-stable-brown-400 text-sm flex items-center justify-center sm:justify-start gap-2">
          Sex:
          {horse.sex ? (
            <span className="flex items-center gap-1 text-sage-green font-medium">
              <CheckIcon />
              True
            </span>
          ) : (
            <span className="flex items-center gap-1 text-rust-red font-medium">
              <TimesIcon />
              False
            </span>
          )}
        </p>
      </div>
      <div className="flex gap-3 w-full sm:w-auto">
        <button
          onClick={onEdit}
          className="bg-rust-red-500 hover:bg-rust-red-600 text-bone-white font-bold py-2 px-4 rounded-full transition-transform transform hover:scale-105 flex-1 sm:flex-none flex items-center justify-center gap-2"
        >
          <EditIcon />
          <span className="hidden sm:inline">Edit</span>
        </button>
        <button
          onClick={onDestroy}
          className="bg-stable-brown-500 hover:bg-stable-brown-600 text-bone-white font-bold py-2 px-4 rounded-full transition-transform transform hover:scale-105 flex-1 sm:flex-none flex items-center justify-center gap-2"
        >
          <TrashIcon />
          <span className="hidden sm:inline">Destroy</span>
        </button>
      </div>
    </div>
  );
};

/**
 * Create Horse Page Component.
 * @param {object} props
 * @param {Function} props.onCreate - Handler to create a new horse.
 * @param {Function} props.onBack - Handler to navigate back.
 */
const CreateHorsePage = ({ onCreate, onBack }) => {
  const [name, setName] = useState('');
  const [sex, setSex] = useState(false);

  /**
   * Submits the form data.
   * @param {object} e - The form event object.
   */
  const handleSubmit = (e) => {
    e.preventDefault();
    if (name.trim()) {
      onCreate(name, sex);
    }
  };

  return (
    <div className="flex flex-col items-center p-6">
      <h1 className="text-3xl font-bold mb-8">Create Horse</h1>
      <form onSubmit={handleSubmit} className="w-full max-w-md space-y-6 bg-saddle-brown-100 dark:bg-stable-brown-700 p-8 rounded-2xl shadow-md">
        <div>
          <label htmlFor="name" className="block text-sm font-medium mb-2">Horse Name</label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="w-full p-3 rounded-lg border border-stable-brown-300 dark:border-stable-brown-600 bg-bone-white dark:bg-stable-brown-800 text-stable-dark-brown dark:text-bone-white focus:outline-none focus:ring-2 focus:ring-sage-green"
          />
        </div>
        <div className="flex items-center gap-4">
          <input
            type="checkbox"
            id="sex"
            checked={sex}
            onChange={(e) => setSex(e.target.checked)}
            className="w-5 h-5 rounded text-sage-green focus:ring-sage-green"
          />
          <label htmlFor="sex" className="text-sm font-medium">Sex?</label>
        </div>
        <div className="flex justify-between gap-4">
          <button
            type="button"
            onClick={onBack}
            className="bg-stable-brown-400 hover:bg-stable-brown-500 text-bone-white font-bold py-3 px-6 rounded-full shadow-md transition-transform transform hover:scale-105 flex-1"
          >
            Back
          </button>
          <button
            type="submit"
            className="bg-saddle-brown-600 hover:bg-stable-brown-700 text-bone-white font-bold py-3 px-6 rounded-full shadow-md transition-transform transform hover:scale-105 flex-1"
          >
            Create Horse
          </button>
        </div>
      </form>
    </div>
  );
};

/**
 * Custom Confirmation Modal Component.
 * @param {object} props
 * @param {Function} props.onConfirm - Handler for "Yes" button.
 * @param {Function} props.onCancel - Handler for "No" button.
 * @param {string} props.horseName - Name of the horse to display.
 */
const ConfirmModal = ({ onConfirm, onCancel, horseName }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-bone-white dark:bg-stable-brown p-8 rounded-2xl shadow-2xl max-w-sm w-full text-center transform transition-all scale-100 animate-scaleIn">
        <h3 className="text-xl font-bold mb-4">Are you sure?</h3>
        <p className="text-stable-brown-700 dark:text-stable-brown-300 mb-6">
          Are you sure you want to destroy <strong>{horseName} /this horse?</strong>? This action cannot be undone.
        </p>
        <div className="flex justify-center gap-4">
          <button
            onClick={onConfirm}
            className="bg-rust-red hover:bg-stable-brown-600 text-bone-white font-bold py-2 px-6 rounded-full transition-transform transform hover:scale-105"
          >
            Yes, destroy horse
          </button>
          <button
            onClick={onCancel}
            className="bg-stable-brown-400 hover:bg-stable-brown-500 text-bone-white font-bold py-2 px-6 rounded-full transition-transform transform hover:scale-105"
          >
            No, cancel
          </button>
        </div>
      </div>
    </div>
  );
};

/**
 * Custom Edit Horse Modal Component.
 * @param {object} props
 * @param {object} props.horse - The horse object being edited.
 * @param {Function} props.onUpdate - Handler to update the horse.
 * @param {Function} props.onCancel - Handler to cancel the edit.
 */
const EditHorseModal = ({ horse, onUpdate, onCancel }) => {
  const [name, setName] = useState(horse?.name || '');
  const [sex, setSex] = useState(horse?.sex || false);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (name.trim()) {
      onUpdate({ ...horse, name, sex });
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-bone-white dark:bg-stable-brown p-8 rounded-2xl shadow-2xl max-w-md w-full transform transition-all scale-100 animate-scaleIn">
        <h3 className="text-xl font-bold mb-4 text-center">Update Horse</h3>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="edit-name" className="block text-sm font-medium mb-2">Horse Name</label>
            <input
              type="text"
              id="edit-name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
              className="w-full p-3 rounded-lg border border-stable-brown-300 dark:border-stable-brown-600 bg-bone-white dark:bg-stable-brown-800 text-stable-dark-brown dark:text-bone-white focus:outline-none focus:ring-2 focus:ring-sage-green"
            />
          </div>
          <div className="flex items-center gap-4">
            <input
              type="checkbox"
              id="edit-sex"
              checked={sex}
              onChange={(e) => setSex(e.target.checked)}
              className="w-5 h-5 rounded text-sage-green focus:ring-sage-green"
            />
            <label htmlFor="edit-sex" className="text-sm font-medium">Sex?</label>
          </div>
          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onCancel}
              className="bg-stable-brown-400 hover:bg-stable-brown-500 text-bone-white font-bold py-2 px-6 rounded-full shadow-md transition-transform transform hover:scale-105"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="bg-sage-green hover:bg-sage-green-600 text-bone-white font-bold py-2 px-6 rounded-full shadow-md transition-transform transform hover:scale-105"
            >
              Update
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};
